// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
import "./Ownable.sol";

interface IERC20 {
    function transferFrom(address from,address to,uint256 amount) external returns (bool);
}

contract deposit is Ownable{
    uint[5] public slab;
    uint[5] public slabTotal;
    struct userDeposit{
        uint balance;
        uint level;
    }
    mapping(address => userDeposit) public depositAmount;

    function setLevel(uint[5] calldata _amount) public onlyOwner{
        for(uint i;i<5;i++){
            slab[i] = _amount[i];
            slabTotal[i] += _amount [i];
        }
    }
//100,200,300,400,500
    function depositByUser(uint _amount) public {
        userDeposit memory user = depositAmount[msg.sender];
        uint bal = user.balance;
        uint level = user.level;
        uint amountLeft = slabTotal[level] - bal;
        user.balance += _amount;         
        if(amountLeft>=_amount){             
            depositAmount[msg.sender] = user;            
        }
        else{
//50 - 0; 150 - 0 50--- 1-100            
            while(_amount !=0){
                level +=1;
                _amount = _amount - amountLeft;
                if(slab[level]>=_amount || level == 4){
                    _amount = 0;
                    user.level = level;
                    depositAmount[msg.sender] = user;                    
                }